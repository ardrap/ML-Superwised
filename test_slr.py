# -*- coding: utf-8 -*-
"""test_SLR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KxWW56G4mJWOORxGsW2t31BzY8sP7Whj
"""

import numpy as np
import pandas as pd
df=pd.read_csv("/content/test (1).csv")
print(df)

df.shape

x=df.iloc[:,:-1].values
y=df.iloc[:,-1].values

import matplotlib.pyplot as plt
plt.scatter(x,y)

# train and test
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.10,random_state=1)
print(x_train)
print(x_test)
print(y_train)
print(y_test)

from sklearn.linear_model import LinearRegression
regression=LinearRegression()
regression.fit(x_train,y_train)

y_pred=regression.predict(x_test)
print(y_pred)

import matplotlib.pyplot as plt
plt.scatter(x_train,y_train,color='green')

import matplotlib.pyplot as plt
plt.scatter(x_train,y_train,color='green')
plt.plot(x_test,y_pred,color='red')
plt.xlabel("Graph")
plt.ylabel("y")
plt.title("x")

# model.predict[[x_test=3]]

# train and test
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.10,random_state=1)
print(x_train)
print(x_test)
print(y_train)
print(y_test)

from sklearn.linear_model import LinearRegression
regression=LinearRegression()
regression.fit(x_train,y_train)

y_pred=regression.predict(x_test)
print(y_pred)

import matplotlib.pyplot as plt
plt.scatter(x_train,y_train,color='green')

import matplotlib.pyplot as plt
plt.scatter(x_train,y_train,color='green')
plt.plot(x_test,y_pred,color='red')
plt.xlabel("Year of Experience")
plt.ylabel("Salary")
plt.title("Salary-Experience")

# model.predict[[x_test=3]]

# print slop
print("coefficience or slop",regression.coef_)
print("intercept",regression.intercept_)

df_pred=pd.DataFrame({"Actual_value":y_test,"Predicted_value":y_pred})
print(df_pred)

# MEAN ABSOLUTE ERROR
from sklearn.metrics import mean_absolute_error,mean_absolute_percentage_error
print("Mean Absolute Error is",mean_absolute_error(y_test,y_pred))
print("Error Precentage",mean_absolute_percentage_error(y_test,y_pred))

# Mean Squared Error
from sklearn.metrics import mean_squared_error,mean_squared_log_error
print("MSCE",mean_squared_error(y_test,y_pred))

# Root Mean Squared
print("RMSE",np.sqrt(mean_squared_error(y_test,y_pred)))

from sklearn.metrics import r2_score
print("r2 score is ",r2_score(y_test,y_pred))